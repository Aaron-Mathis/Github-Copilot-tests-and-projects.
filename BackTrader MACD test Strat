#This program uses the backtrader library to backtest a basic MACD crossover strategy
#The strategy is as follows:
#1. Buy when the MACD crosses above the signal line
#2. Sell when the MACD crosses below the signal line
#3. Sell at the end of the day

import backtrader as bt
import backtrader.indicators as btind
import datetime
import pandas as pd
import yfinance as yf
import os
import sys

#Create a strategy
class MACD(bt.Strategy):
    params = (('macd1', 12), ('macd2', 26), ('macdsig', 9), ('printlog', False), ('printlog2', False))

    def log(self, txt, dt=None):
        ''' Logging function for this strategy'''
        if self.params.printlog:
            dt = dt or self.datas[0].datetime.date(0)
            print('%s, %s' % (dt.isoformat(), txt))

    def log2(self, txt, dt=None):
        ''' Logging function for this strategy'''
        if self.params.printlog2:
            dt = dt or self.datas[0].datetime.date(0)
            print('%s, %s' % (dt.isoformat(), txt))

    def __init__(self):
        self.macd = btind.MACD(self.data, period_me1=self.params.macd1, period_me2=self.params.macd2, period_signal=self.params.macdsig)
        self.signal = btind.CrossOver(self.macd.macd, self.macd.signal)
        self.order = None

    def notify_order(self, order):
        if order.status in [order.Submitted, order.Accepted]:
            return

        if order.status in [order.Completed]:
            if order.isbuy():
                self.log('BUY EXECUTED, %.2f' % order.executed.price)
            elif order.issell():
                self.log('SELL EXECUTED, %.2f' % order.executed.price)

            self.bar_executed = len(self)

        elif order.status in [order.Canceled, order.Margin, order.Rejected]:
            self.log('Order Canceled/Margin/Rejected')

        self.order = None

    def notify_trade(self, trade):
        if not trade.isclosed:
            return

        self.log('OPERATION PROFIT, GROSS %.2f, NET %.2f' % (trade.pnl, trade.pnlcomm))

    def next(self):
        self.log2('Close, %.2f' % self.data.close[0])

        if self.order:
            return

        if not self.position:
            if self.signal > 0:
                self.log('BUY CREATE, %.2f' % self.data.close[0])
                self.order = self.buy()

        else:
            if self.signal < 0:
                self.log('SELL CREATE, %.2f' % self.data.close[0])                                              
                self.order = self.sell()

        if self.data.datetime.time() == datetime.time(16, 0, 0):
            self.log('SELL CREATE, %.2f' % self.data.close[0])
            self.order = self.sell()

#Create a cerebro entity
cerebro = bt.Cerebro()

#Add a strategy
cerebro.addstrategy(MACD)

#Get Apple data from Yahoo Finance.
data = bt.feeds.PandasData(dataname=yf.download ('AAPL', '2015-01-01', '2019-01-01'))

#Add the data to Cerebro
cerebro.adddata(data)

#Set our desired cash start
cerebro.broker.setcash(1000.0)

#Add a FixedSize sizer according to the stake
cerebro.addsizer(bt.sizers.FixedSize, stake=10)

#Set the commission
cerebro.broker.setcommission(commission=0.0)

#Print out the starting conditions
print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())

#Run over everything
cerebro.run()

#Print out the final result
print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())



